package edu.up.br.exemplo.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/*
CREATE TABLE clientes (
	id_cliente INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
	nome VARCHAR(60) NOT NULL,	
	cpf VARCHAR(11) NOT NULL,
	endereco VARCHAR(60) NOT NULL
)
*/
public class Cliente 
{
	private ClienteBean clienteBean;

	public Cliente() {
	}
	
	public Cliente(ClienteBean clienteBean) {
		this.clienteBean = clienteBean;
	}
		
	public ClienteBean autenticar(String nickname, String password) 
	{ 
		//INVOCANDO A CLASSE QUE GERENCIA A CONEXAO COM O BANCO DE DADOS
		ConnectionDB manager = new ConnectionDB();
		Connection cn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			//ABRINDO A CONEXÃO COM O BANDO DE DADOS
			cn = manager.connect();
			
			//INSERIR/EDITAR O COMANDO SQL PARA BUSCAR AS INFORMAÇÕES
			String sql = "SELECT * FROM clientes WHERE nickname='"+nickname+"' AND password='"+password+"'";

			//EXECUTAR O COMANDO SQL
			ps = cn.prepareStatement( sql );
			//OBTER A RESPOSTA DO BANCO DE DADOS
			rs = ps.executeQuery();
			//LISTAR O RESULTADO E PREPARAR DE ACORDO COM A NECESSIDADE DO PROGRAMA
			while( rs.next() ) {
				ClienteBean bean = new ClienteBean();
				bean.setNome( rs.getString("nome") );
				bean.setCpf( rs.getString("cpf") );
				bean.setEndereco( rs.getString("endereco") );
				bean.setNickname( rs.getString("nickname") );
				String admin = rs.getString("administrador");
				if( admin.equals("1") ) {
					bean.setAdmin(true);
				}
				return bean;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if( rs != null ) {
				try { rs.close(); } catch (SQLException e) {}
			}
			if( ps != null ) {
				try { ps.close(); } catch (SQLException e) {}
			}
			if( cn != null ) {
				manager.disconnect(cn);
			}
			
		}
		return null;
	}
	
	public int gravar() 
	{
		ConnectionDB gerenciarBD = new ConnectionDB();
		Connection conexao = null;
		Statement editor = null;
		try 
		{
			conexao = gerenciarBD.connect();
			editor = conexao.createStatement();
			
			String administrador = "0";
			if( this.clienteBean.isAdmin() ) {
				administrador = "1";
			}
			String comandoSQL = "INSERT INTO clientes (nome, cpf, endereco, nickname, password, administrador) VALUES "
					+ "('" + this.clienteBean.getNome() + "', '"+ this.clienteBean.getCpf() 
					+ "', '"+this.clienteBean.getEndereco()+"','"+this.clienteBean.getNickname()
					+ "', '"+this.clienteBean.getPassword()+"','"+administrador+"')";
								
			int resultado = editor.executeUpdate( comandoSQL );
			if( resultado > 0 ) {
				ResultSet rs = editor.executeQuery("SELECT MAX(id_cliente) FROM clientes");
				if(rs.next()) {
					this.clienteBean.setId( rs.getInt( 1 ) );	
				}
				return 1;
			}
			return 0;
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		} finally {
			try {
				editor.close();
				gerenciarBD.disconnect( conexao );
			} catch (Exception e2) {}
		}
	}
	
	public ClienteBean pesquisar() 
	{
		ConnectionDB gerenciadorConexao = new ConnectionDB();
		Connection cn = null;
		Statement st = null;
		ResultSet rs = null;
		try {
			cn = gerenciadorConexao.connect();
			st = cn.createStatement();

			String comandoSQL = "SELECT * FROM clientes";
			comandoSQL += " WHERE cpf='" + this.clienteBean.getCpf() + "'";
			
			rs = st.executeQuery(comandoSQL);
			if( rs.next() ) {
				ClienteBean bean = new ClienteBean();
				bean.setId(Integer.parseInt(rs.getString("id_cliente")));
				bean.setNome(rs.getString("nome"));
				bean.setCpf(rs.getString("cpf"));
				bean.setEndereco(rs.getString("endereco"));
				bean.setNickname( rs.getString("nickname") );
				String admin = rs.getString("administrador");
				if( admin.equals("1") ) {
					bean.setAdmin(true);
				}
				return bean;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			return null;
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					return null;
				}
			}
			if (st != null) {
				try {
					st.close();
				} catch (SQLException e) {
					return null;
				}
			}
			if (cn != null) {
				gerenciadorConexao.disconnect(cn);
			}
		}
		return null;
	}
			
	public ClienteBean alterar() 
	{
		ConnectionDB gerenciarBD = new ConnectionDB();
		Connection conexao = null;
		Statement editor = null;
		try 
		{
			conexao = gerenciarBD.connect();
			editor = conexao.createStatement();
			String admin = "0";
			if( this.clienteBean.isAdmin() ) {
				admin = "1";
			}
			String comandoSQL = "UPDATE clientes SET nome='"+this.clienteBean.getNome()+"'"
					+ ", cpf='"+this.clienteBean.getCpf()+"', endereco='"+this.clienteBean.getEndereco()+"'"
					+ ", nickname='"+this.clienteBean.getNickname()+"', administrador='"+admin+"'"
					+ " WHERE id_cliente="+this.clienteBean.getId();
								
			int resultado = editor.executeUpdate( comandoSQL );
			if( resultado != 0 ) {				
				return this.clienteBean;
			}
			return null;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		} finally {
			try {
				editor.close();
				gerenciarBD.disconnect( conexao );
			} catch (Exception e2) {}
		}
	}
	
	public int excluir() 
	{	
		int resultado = 0;
		ConnectionDB gerenciadorConexao = new ConnectionDB();
		Connection cn = null;
		Statement st = null;
		try {
			cn = gerenciadorConexao.connect();
			st = cn.createStatement();

			String comandoSQL = "DELETE FROM clientes WHERE id_cliente=" + this.clienteBean.getId();
			resultado = st.executeUpdate(comandoSQL);
			
			return resultado;
			
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			if (st != null) {
				try {
					st.close();
				} catch (SQLException e) {
				}
			}
			if (cn != null) {
				gerenciadorConexao.disconnect(cn);
			}
		}
		return resultado;
	}
}